<?php

/**
 * @file
 * Allows users to take their pants on and off.
 */

///// HOOKS /////

/**
 * Implements hook_menu().
 */
function pants_menu() {
  $items['pants/change/%user'] = array(
    'title' => 'Change pants',
    'page callback' => 'pants_change',
    'page arguments' => array(2),
    'access callback' => 'pants_change_access', // Default.
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/people/pants'] = array(
    'title' => 'Pants',
    'description' => 'Administer pants.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pants_settings'),
    'access callback' => 'user_access', // Defaut.
    'access arguments' => array('administer pants'),
    'type' => MENU_NORMAL_ITEM, // Default.
  );

  return $items;
}

/**
 * Pants change menu access callback.
 */
function pants_change_access() {
  return user_access('change pants status') || user_access('administer pants');
}

/**
 * Implements hook_permission().
 */
function pants_permission() {
  return array(
    'change pants status' => array(
      'title' => t('Change pants status'),
     ),
    'administer pants' => array(
      'title' => t('Administer pants'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for user_profile_form().
 */
function pants_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] == 'account' && user_access('change pants status')) {
    $account = $form_state['user'];
    $form['pants_status'] = array(
      '#type' => 'fieldset',
      '#title' => t('Pants'),
    );
    $form['pants_status']['pants'] = array(
      '#type' => 'checkbox',
      '#title' => t('Are you wearing pants?'),
      '#default_value' => !empty($account->pants) ? 1 : 0,
    );
  }
}

/**
 * Implements hook_user_presave().
 */
function pants_user_presave(&$edit, $account, $category) {
  if (isset($edit['pants'])) {
    pants_set($account->uid, $edit['pants']);
  }
}

/**
 * Implements hook_user_load().
 */
function pants_user_load($users) {
  $result = db_query('SELECT uid, status FROM {pants} WHERE uid IN (:uids)', array(
    ':uids' => array_keys($users),
  ));
  foreach ($result as $record) {
    $users[$record->uid]->pants = $record->status;
  }
}

/**
 * Implements hook_user_view().
 */
function pants_user_view($account, $view_mode, $langcode) {
  $account->content['summary']['pants'] = array(
    '#type' => 'user_profile_item',
    '#title' => t('Pants status'),
    '#markup' => theme('pants_status', array('account' => $account, 'type' => variable_get('pants_type', ''))),
  );
}

/**
 * Implements hook_theme().
 */
function pants_theme() {
  return array(
    'pants_status' => array(
      'variables' => array('account' => NULL, 'type' => ''),
    ),
    'pants_change_block' => array(
      'variables' => array(),
    ),
    'pants_history_item' => array(
      'variables' => array('item' => NULL),
    ),
  );
}

/**
 * Returns HTML for user's pants status.
 *
 * @param array $variables
 *   An associative array containing:
 *   - account: A user object whose pants status should be displayed.
 *   - type: Type of pants to display (defaults to none).
 *
 * @ingroup themeable
 */
function theme_pants_status($variables) {
  $account = $variables['account'];
  $type = $variables['type'];

  switch ($type) {
    case '':
      return pants_get($account->uid) ? t('On') : t('Off');
    case 'mchammer':
      return pants_get($account->uid) ? theme('image', array('path' => 'http://nickyscostumes.com.au/images/uploads/hammerpants.jpg')) : t('Off');
    case 'bellbottoms':
      return pants_get($account->uid) ? theme('image', array('path' => 'http://ecx.images-amazon.com/images/I/41xXmNdZn8L._SY200_.jpg')) : t('Off');  
  }
}

/**
 * Returns HTML for "Change pants" block.
 *
 * @ingroup themeable
 */
function theme_pants_change_block($variables) {
  global $user;

  $output  = '<div class="pants-status">';
  $output .= theme('pants_status', array('account' => $user));
  $output .= '</div>';

  $output .= l(t('Change'), "pants/change/{$user->uid}", array('attributes' => array('id' => 'pants')));

  return $output;
}

/**
 * Returns HTML for a history item in the "Recent pants" block.
 *
 * @ingroup themeable
 */
function theme_pants_history_item($variables) {
  $item = $variables['item'];
  $username = theme('username', array('account' => $item));
  $time = format_interval(time() - $item->changed);
  if ($item->status) {
    $output = t('!username put pants on @time ago', array('!username' => $username, '@time' => $time));
  }
  else {
    $output = t('!username took pants off @time ago', array('!username' => $username, '@time' => $time));
  }
  return $output;
}

/**
 * Implements hook_block_info().
 */
function pants_block_info() {
  $blocks['change_pants'] = array(
    'info' => t('Change pants'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['recent_pants'] = array(
    'info' => t('Recent pants'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pants_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'change_pants':
      global $user;

      $block['subject'] = t('Change pants');
      $block['content'] = array(
        '#theme' => 'pants_change_block',
        '#attached' => array(
          'js' => array(
            array('data' => drupal_get_path('module', 'pants') . '/pants.js', 'type' => 'file'),
            array('data' => array('uid' => $user->uid), 'type' => 'setting'),
          ),
        ),
      );
      break;
    case 'recent_pants':
      $items = array();
      $count = variable_get('pants_recent_block_count', 10);
      $result = db_query_range('SELECT u.uid, u.name, p.status, p.changed, changed_by FROM {pants_history} p INNER JOIN {users} u ON p.uid = u.uid ORDER BY changed DESC', 0, $count)->fetchAll();
      foreach ($result as $item) {
        $items[] = theme('pants_history_item', array('item' => $item));
      }

      $block['subject'] = t('Recent pants');
      $block['content'] = array(
        '#theme' => 'item_list__pants_recent_block',
        '#items' => $items,
      );
      break;
  }

  return $block;
}

/**
 * Form builder; The pants settings form.
 */
function pants_settings() {
  $form['pants_type'] = array(
    '#type' => 'radios',
    '#title' => t('Pants type'),
    '#options' => array(
      '' => t('None (just show on/off status)'),
      'bellbottoms' => t('Bellbottoms'),
      'mchammer' => t('MC Hammer'),
    ),
    '#default_value' => variable_get('pants_type', ''),
    '#description' => t('Choose pants type to show on the user profile.'),
  );

  return system_settings_form($form);
}

///// CRUD FUNCTIONS ////

/**
 * Toggles a user's pants setting to the opposite of what it is now.
 *
 * @param stdClass $user
 *   A user object.
 */
function pants_change($account) {
  $uid = $account->uid;
  $status = 1 - pants_get($uid);
  pants_set($uid, $status);
  print theme('pants_status', array('account' => $account));
  exit;
}

/**
 * Returns a user's current pants status.
 * 
 * @param int $uid
 *   A user's {users}.uid.
 *
 * @return int $status
 *   The user's pants status (1 or 0).
 */
function pants_get($uid) {
  $status = db_query('SELECT status FROM {pants} WHERE uid = :uid', array(
    ':uid' => $uid,
  ))->fetchField();
  return $status;
}

/**
 * Changes the value of a user's pants status.
 *
 * @param int $uid
 *   A user's {users}.uid.
 *
 * @return int $status
 *   A 1 or 0 with which to modify the user's pants status.
 */
function pants_set($uid, $status) {
  global $user;

  // Insert or update current row in {pants} table.
  db_merge('pants')
    ->key(array('uid' => $uid))
    ->fields(array(
      'uid' => $uid,
      'status' => $status,
    ))
    ->execute();

  // Also insert new record into {pants_history}.
  db_insert('pants_history')
    ->fields(array(
      'uid' => $uid,
      'status' => $status,
      'changed' => REQUEST_TIME,
      'changed_by' => $user->uid,
    ))
    ->execute();
}

